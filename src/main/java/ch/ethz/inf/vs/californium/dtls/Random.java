/*******************************************************************************
 * Copyright (c) 2012, Institute for Pervasive Computing, ETH Zurich.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * This file is part of the Californium (Cf) CoAP framework.
 ******************************************************************************/
package ch.ethz.inf.vs.californium.dtls;

import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Date;

import ch.ethz.inf.vs.californium.util.ByteArrayUtils;

/**
 * A 32-byte value provided by the client and the server in the
 * {@link ClientHello} respectively in the {@link ServerHello} used later in the
 * protocol to compute the premaster secret. See <a
 * href="http://tools.ietf.org/html/rfc5246#appendix-A.4.1">RFC 5246</a> for the
 * message format.
 * 
 * @author Stefan Jucker
 * 
 */
public class Random {

	// Members ////////////////////////////////////////////////////////

	/**
	 * The current time and date in standard UNIX 32-bit format + 28 bytes
	 * generated by a secure random number generator
	 */
	private byte[] randomBytes;

	// Constructor ////////////////////////////////////////////////////

	public Random() {
		this.randomBytes = new byte[0];
	}

	public Random(SecureRandom generator) {
		int gmtUnixTime = (int) (System.currentTimeMillis() / 1000);

		this.randomBytes = new byte[32];
		// fill all 32 bytes with random bytes
		generator.nextBytes(this.randomBytes);

		// overwrite the first 4 bytes with the UNIX time
		this.randomBytes[0] = (byte) (gmtUnixTime >> 24);
		this.randomBytes[1] = (byte) (gmtUnixTime >> 16);
		this.randomBytes[2] = (byte) (gmtUnixTime >> 8);
		this.randomBytes[3] = (byte) gmtUnixTime;
	}

	public Random(byte[] randomBytes) {
		this.randomBytes = randomBytes;
	}

	// Methods ////////////////////////////////////////////////////////

	/**
	 * Gets the random bytes.
	 * 
	 * @return the random bytes
	 */
	public byte[] getRandomBytes() {
		return randomBytes;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();

		// get the UNIX timestamp from the first 4 bytes
		byte b0 = randomBytes[0];
		byte b1 = randomBytes[1];
		byte b2 = randomBytes[2];
		byte b3 = randomBytes[3];
		int gmtUnixTime = ((0xFF & b0) << 24) | ((0xFF & b1) << 16) | ((0xFF & b2) << 8) | (0xFF & b3);

		Date date = new Date(gmtUnixTime * 1000L);

		sb.append("\t\t\tGMT Unix Time: " + date.toString() + "\n");
		
		// output the remaining 28 random bytes
		byte[] rand = Arrays.copyOfRange(randomBytes, 4, 32);
		sb.append("\t\t\tRandom Bytes: " + ByteArrayUtils.toHexString(rand) + "\n");

		return sb.toString();
	}

}